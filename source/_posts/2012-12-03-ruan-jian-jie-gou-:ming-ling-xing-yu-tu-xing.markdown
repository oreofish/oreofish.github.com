---
layout: null
title: "程序结构：命令行与图形"
date: 2012-12-03 10:34
comments: true
categories: 
---

这个世界上存在两种人机界面：命令行方式和图形方式。

古老的程序，都是面向机器的。那时操作计算机的人都是大师，他们深谙眼前的这个大家伙是如何运作的，所以用它的思路与它交流，而且限于当时的技术条件，也只能如此。当时的程序结构都是顺序的：开始运行，读取输入，计算，给出输出，“job done”。在这个时代，几乎只有shell是面向人类的（C-3PO），其他都是面向机器的（R2D2）。后来计算机向普通民众普及的时候，还这样做就不行了，人类习惯了交互式的沟通方式，程序也要跟着变，程序结构就变成了事件式的：开始运行，安排好各种要监听的事件，然后陷入等待。这种方式是面向人类的，这时使用者可以通过界面对这个软件进行复杂的操作。

在网络时代，请求网页，每个URL就对应一个程序，这时的URL可以理解为一种网络版的命令，只是每个命令之间的调用关系，定义的更加明确。我们把命令行与URL放在一起对比一下：

> 命令行：grep “Error” log/* -ri
> URL调用：http://some.site.com/grep?arg1=Error&arg2=log

看，这里的两种模型都是 命令+参数，一一对应，所以他们的接口一致。他们都是运行一个独立的程序，返回一个完整的结果，这个结果与之前之后的调用没有直接关系。

所以命令行后来发展为图形方式了，Web也在向App方向发展。那么对应于命令行向图形的转变，Web也在从请求应答模型向事件响应模型变化，这个变化开始是在服务端，现在已经逐渐向客户端迁移。最典型的例子就是AJAX，

> 函数调用：int grep("Error", "log/*");
> ajax调用：xhr.open("get", "grep?arg1=Error&arg2=log"); 

这里的两种模型也都是 命令+参数，与上述例子接口一致。但是ajax更类似函数调用模型，都是取回返回值，应用到当前结果（程序或页面）之中。这里的AJAX调用，更像传统程序里的事件函数调用，所以以后AJAX方式会大行其道，而且这还只是个开始，以后会走的更远。
  
